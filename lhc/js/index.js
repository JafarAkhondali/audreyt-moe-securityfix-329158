// Generated by LiveScript 1.2.0
(function(){
  var origin, buffer, myInput, myOutput, CharComp, CompChar, OrigChars, msgBeforeData, msgAfterData, split$ = ''.split, join$ = [].join;
  Array.prototype.powerset = String.prototype.powerset = function(){
    var xs, x, p;
    if (this.length <= 1) {
      return this;
    }
    xs = Array.prototype.slice.call(this);
    x = Array.prototype.pop.call(xs);
    p = xs.powerset();
    return p.concat(p.map(function(it){
      return it.concat([x]);
    }));
  };
  String.prototype.permutate = function(){
    var ret, xs, x, p, i$, len$, set, j$, to$, i, before, after;
    if (this.length === 1) {
      return this;
    }
    ret = [];
    xs = this.substr(1);
    x = this[0];
    p = xs.permutate();
    for (i$ = 0, len$ = p.length; i$ < len$; ++i$) {
      set = p[i$];
      for (j$ = 0, to$ = set.length; j$ <= to$; ++j$) {
        i = j$;
        before = set.substring(0, i);
        after = set.substring(i);
        ret.push(before + x + after);
      }
    }
    return ret;
  };
  origin = "http://127.0.0.1:8888/";
  buffer = [];
  myInput = "";
  myOutput = [];
  buffer = [];
  msgBeforeData = function(arg$){
    var data;
    data = arg$.data;
    return buffer.push(data);
  };
  msgAfterData = function(arg$){
    var data, comps, getComps, foo, i$, ref$, len$, part, seen, ch, scanned, scanl;
    data = arg$.data;
    myInput = data;
    myOutput = [];
    comps = [];
    getComps = function(it){
      var out, i$, len$, char, comps;
      out = "";
      if (it.length <= 0) {
        return out;
      }
      for (i$ = 0, len$ = it.length; i$ < len$; ++i$) {
        char = it[i$];
        comps = CharComp[char];
        if (comps) {
          out += comps;
        }
      }
      return it + getComps(out);
    };
    comps = getComps(myInput);
    foo = {};
    for (i$ = 0, len$ = (ref$ = (split$.call(comps, '')).sort()).length; i$ < len$; ++i$) {
      part = ref$[i$];
      foo[part] = true;
    }
    comps = join$.call(Object.keys(foo).sort(), '');
    seen = {};
    for (i$ = 0, len$ = comps.length; i$ < len$; ++i$) {
      ch = comps[i$];
      if (in$(ch, OrigChars)) {
        seen[ch] = true;
      }
    }
    scanned = {
      '': true
    };
    scanl = function(taken, rest){
      var c, head;
      if (!scanned[taken]) {
        scanned[taken] = true;
        c = CompChar[taken];
        if (c && in$(c, OrigChars)) {
          seen[c] = true;
        }
      }
      if (rest.length === 0) {
        return;
      }
      head = rest[0];
      rest = rest.substr(1);
      scanl(taken, rest);
      return scanl(taken + head, rest);
    };
    scanl('', comps);
    return JSON.stringify(Object.keys(seen), void 8, 2);
  };
  window.id = 'lhc';
  window.reset = function(){
    return myInput = "";
  };
  window.input = function(it){
    return msgBeforeData({
      data: it
    });
  };
  window.addEventListener('message', msgBeforeData);
  window.output = function(it){
    if (window.muted) {
      return;
    }
    return window.top.postMessage(it, origin);
  };
  $.get('./data/char_comp_simple.json', function(d){
    CharComp = d;
    return $.get('./data/comp_char_sorted.json', function(d){
      CompChar = d;
      return $.get('./data/orig-chars.json', function(d){
        var i$, ref$, len$, data;
        OrigChars = d;
        window.input = function(it){
          return msgAfterData({
            data: it
          });
        };
        window.removeEventListener('message', msgBeforeData);
        for (i$ = 0, len$ = (ref$ = buffer).length; i$ < len$; ++i$) {
          data = ref$[i$];
          msgAfterData({
            data: data
          });
        }
        return window.addEventListener('message', msgAfterData);
      });
    });
  });
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
