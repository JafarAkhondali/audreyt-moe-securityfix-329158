// Generated by LiveScript 1.2.0
(function(){
  var objects, targets;
  window.camera = window.scene = window.renderer = window.controls = null;
  objects = [];
  targets = {
    table: [],
    sphere: [],
    helix: [],
    grid: []
  };
  window.init = (function(){
    function init(table){
      var camera, scene, i$, to$, i, element, number, symbol, details, object, vector, l, ref$, len$, obj, phi, theta, renderer, controls, button;
      window.camera = camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 5000);
      camera.position.z = 1500;
      window.scene = scene = new THREE.Scene();
      for (i$ = 0, to$ = table.length; i$ < to$; i$ += 5) {
        i = i$;
        element = document.createElement('div');
        element.className = 'element';
        element.style.backgroundColor = 'rgba(0,127,127,' + (Math.random() * 0.5 + 0.25) + ')';
        number = document.createElement('div');
        number.className = 'number';
        number.textContent = table[i + 4];
        element.appendChild(number);
        symbol = document.createElement('div');
        symbol.className = 'symbol';
        symbol.textContent = table[i];
        element.appendChild(symbol);
        details = document.createElement('div');
        details.className = 'details';
        details.innerHTML = table[i + 2];
        element.appendChild(details);
        object = new THREE.CSS3DObject(element);
        object.position.x = Math.random() * 4000 - 2000;
        object.position.y = Math.random() * 4000 - 2000;
        object.position.z = Math.random() * 4000 - 2000;
        scene.add(object);
        objects.push(object);
        object = new THREE.Object3D();
        object.position.x = table[i + 3] * 140 - 1330;
        object.position.y = -(table[i + 4] * 180) + 990;
        targets.table.push(object);
      }
      vector = new THREE.Vector3();
      l = objects.length;
      for (i$ = 0, len$ = (ref$ = objects).length; i$ < len$; ++i$) {
        i = i$;
        obj = ref$[i$];
        phi = Math.acos(-1 + (2 * i) / l);
        theta = Math.sqrt(l * Math.PI) * phi;
        object = new THREE.Object3D();
        object.position.x = 800 * Math.cos(theta) * Math.sin(phi);
        object.position.y = 800 * Math.sin(theta) * Math.sin(phi);
        object.position.z = 800 * Math.cos(phi);
        vector.copy(object.position).multiplyScalar(2);
        object.lookAt(vector);
        targets.sphere.push(object);
      }
      vector = new THREE.Vector3();
      for (i$ = 0, len$ = (ref$ = objects).length; i$ < len$; ++i$) {
        i = i$;
        obj = ref$[i$];
        phi = i * 0.175 + Math.PI;
        object = new THREE.Object3D();
        object.position.x = 900 * Math.sin(phi);
        object.position.y = -(i * 8) + 450;
        object.position.z = 900 * Math.cos(phi);
        vector.x = object.position.x * 2;
        vector.y = object.position.y;
        vector.z = object.position.z * 2;
        object.lookAt(vector);
        targets.helix.push(object);
      }
      for (i$ = 0, len$ = (ref$ = objects).length; i$ < len$; ++i$) {
        i = i$;
        obj = ref$[i$];
        object = new THREE.Object3D();
        object.position.x = (i % 5) * 400 - 800;
        object.position.y = (0 - (Math.floor(i / 5) % 5) * 400) + 800;
        object.position.z = Math.floor(i / 25) * 1000 - 2000;
        targets.grid.push(object);
      }
      window.renderer = renderer = new THREE.CSS3DRenderer();
      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.domElement.style.position = 'absolute';
      document.getElementById('container').appendChild(renderer.domElement);
      window.controls = controls = new THREE.TrackballControls(camera, renderer.domElement);
      controls.rotateSpeed = 0.5;
      controls.addEventListener('change', render);
      button = document.getElementById('sphere');
      button.addEventListener('click', function(){
        return transform(targets.sphere, 2000);
      }, false);
      button = document.getElementById('helix');
      button.addEventListener('click', function(){
        return transform(targets.helix, 2000);
      }, false);
      button = document.getElementById('grid');
      button.addEventListener('click', function(){
        console.log(targets.grid);
        return transform(targets.grid, 2000);
      }, false);
      transform(targets.sphere, 5000);
      return window.addEventListener('resize', onWindowResize, false);
    }
    return init;
  }());
  /*
  $iframe = $('<iframe src="https://www.moedict.tw/#~@" style="height: 100%; width: 30%; right: 0; position: fixed">')
  $('body').append($iframe)
  $('body').on('click', '.element', function() {
  $iframe.attr('src', 'https://www.moedict.tw/#~@' + encodeURIComponent($('.symbol', this).text()))
  })
  */
  window.transform = (function(){
    function transform(targets, duration){
      var i$, ref$, len$, i, object, target;
      TWEEN.removeAll();
      for (i$ = 0, len$ = (ref$ = objects).length; i$ < len$; ++i$) {
        i = i$;
        object = ref$[i$];
        target = targets[i];
        new TWEEN.Tween(object.position).to({
          x: target.position.x,
          y: target.position.y,
          z: target.position.z
        }, Math.random() * duration + duration).easing(TWEEN.Easing.Exponential.InOut).start();
        new TWEEN.Tween(object.rotation).to({
          x: target.rotation.x,
          y: target.rotation.y,
          z: target.rotation.z
        }, Math.random() * duration + duration).easing(TWEEN.Easing.Exponential.InOut).start();
      }
      return new TWEEN.Tween(this).to({}, duration * 2).onUpdate(render).start();
    }
    return transform;
  }());
  window.onWindowResize = (function(){
    function onWindowResize(){
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
      return render();
    }
    return onWindowResize;
  }());
  window.animate = (function(){
    function animate(){
      requestAnimationFrame(animate);
      TWEEN.update();
      return controls.update();
    }
    return animate;
  }());
  window.render = (function(){
    function render(){
      return renderer.render(scene, camera);
    }
    return render;
  }());
}).call(this);
