// Generated by LiveScript 1.2.0
(function(){
  var replace$ = ''.replace;
  $(function(){
    var CACHED, GET, $in, $out;
    CACHED = {};
    GET = function(url, data, onSuccess, dataType){
      var ref$;
      if (data instanceof Function) {
        ref$ = [null, onSuccess, data], data = ref$[0], dataType = ref$[1], onSuccess = ref$[2];
      }
      if (CACHED[url]) {
        return onSuccess(CACHED[url]);
      }
      return $.get(url, data, function(it){
        return onSuccess(CACHED[url] = it);
      }, dataType || 'json').fail(function(){});
    };
    $in = $('#input');
    $out = $('#output');
    return GET("Shape.json", function(Shape){
      return GET("Sound.json", function(Sound){
        return GET("Radical.json", function(Radical){
          return GET("RadicalSame.json", function(RadicalSame){
            return GET("SoundRhyme.json", function(SoundRhyme){
              return GET("SoundAlike.json", function(SoundAlike){
                var origin;
                origin = "http://127.0.0.1:8888/";
                window.id = 'tmuse';
                window.reset = function(){
                  return $in.val('');
                };
                window.addEventListener("message", function(it){
                  return window.input(it.data, false);
                });
                window.input = function(it){
                  var i$, len$, char, lresult$, j$, ref$, len1$, ch, results$ = [];
                  $in.val(it);
                  $out.empty();
                  function x(it){
                    return replace$.call(it, /[`~]/g, '');
                  }
                  for (i$ = 0, len$ = it.length; i$ < len$; ++i$) {
                    char = it[i$];
                    lresult$ = [];
                    if (!Shape[char]) {
                      continue;
                    }
                    for (j$ = 0, len1$ = (ref$ = char + Shape[char]).length; j$ < len1$; ++j$) {
                      ch = ref$[j$];
                      lresult$.push(draw(ch));
                    }
                    results$.push(lresult$);
                  }
                  return results$;
                };
                window.output = function(it){
                  if (window.muted) {
                    return;
                  }
                  input(it);
                  return window.top.postMessage(it, origin);
                };
                function draw(ch){
                  var parts, i$, ref$, len$, s, $li, p;
                  parts = [];
                  parts.push($('<a/>', {
                    href: '#'
                  }).text(ch).click(function(){
                    return window.output($(this).text());
                  }));
                  for (i$ = 0, len$ = (ref$ = Sound[ch] || []).length; i$ < len$; ++i$) {
                    s = ref$[i$];
                    parts.push($('<a/>', {
                      href: '#'
                    }).text(s).click(fn$));
                  }
                  parts.push($('<a/>', {
                    href: '#'
                  }).text(Radical[ch]).click(function(){
                    return goRadical($(this).text());
                  }));
                  $li = $('<li/>');
                  for (i$ = 0, len$ = parts.length; i$ < len$; ++i$) {
                    p = parts[i$];
                    $li.append(p);
                    $li.append('&nbsp;');
                  }
                  return $li.appendTo($out);
                  function fn$(){
                    return goAlike($(this).text());
                  }
                }
                function goRadical(it){
                  var i$, ref$, len$, ch;
                  $out.empty();
                  for (i$ = 0, len$ = (ref$ = RadicalSame[it]).length; i$ < len$; ++i$) {
                    ch = ref$[i$];
                    draw(ch);
                  }
                }
                function goRhyme(it){
                  var i$, ref$, ref1$, len$, ch, results$ = [];
                  $out.empty();
                  for (i$ = 0, len$ = (ref$ = SoundRhyme[(ref1$ = replace$.call(it, /[ˋˊˇ‧]/g, ''))[ref1$.length - 1]]).length; i$ < len$; ++i$) {
                    ch = ref$[i$];
                    results$.push(draw(ch));
                  }
                  return results$;
                }
                function goAlike(it){
                  var i$, ref$, len$, ch, results$ = [];
                  $out.empty();
                  for (i$ = 0, len$ = (ref$ = SoundAlike[replace$.call(it, /[ˋˊˇ‧]/g, '')]).length; i$ < len$; ++i$) {
                    ch = ref$[i$];
                    results$.push(draw(ch));
                  }
                  return results$;
                }
                return GET("Table.json", function(table){
                  var init, transform, onWindowResize, animate, render, objects, targets;
                  init = function(){
                    var camera, scene, i, element, number, symbol, details, object, vector, l, phi, theta, renderer, controls, button;
                    window.camera = camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 5000);
                    camera.position.z = 1500;
                    window.scene = scene = new THREE.Scene;
                    i = 0;
                    while (i < table.length) {
                      element = document.createElement('div');
                      element.className = 'element';
                      element.style.backgroundColor = 'rgba(0,127,127,' + Math.random() * 0.5 + 0.25 + ')';
                      number = document.createElement('div');
                      number.className = 'number';
                      number.textContent = table[i + 4];
                      element.appendChild(number);
                      symbol = document.createElement('div');
                      symbol.className = 'symbol';
                      symbol.textContent = table[i];
                      element.appendChild(symbol);
                      details = document.createElement('div');
                      details.className = 'details';
                      details.innerHTML = table[i + 1] + '<br>' + table[i + 2];
                      element.appendChild(details);
                      object = new THREE.CSS3DObject(element);
                      object.position.x = Math.random() * 4000 - 2000;
                      object.position.y = Math.random() * 4000 - 2000;
                      object.position.z = Math.random() * 4000 - 2000;
                      scene.add(object);
                      objects.push(object);
                      object = new THREE.Object3D;
                      object.position.x = table[i + 3] * 140 - 1330;
                      object.position.y = -(table[i + 4] * 180) + 990;
                      targets.table.push(object);
                      i += 5;
                    }
                    vector = new THREE.Vector3;
                    i = 0;
                    l = objects.length;
                    while (i < l) {
                      phi = Math.acos(-1 + 2 * i / l);
                      theta = Math.sqrt(l * Math.PI) * phi;
                      object = new THREE.Object3D;
                      object.position.x = 800 * Math.cos(theta * Math.sin(phi));
                      object.position.y = 800 * Math.sin(theta * Math.sin(phi));
                      object.position.z = 800 * Math.cos(phi);
                      vector.copy(object.position).multiplyScalar(2);
                      object.lookAt(vector);
                      targets.sphere.push(object);
                      i++;
                    }
                    vector = new THREE.Vector3;
                    i = 0;
                    l = objects.length;
                    while (i < l) {
                      phi = i * 0.175 + Math.PI;
                      object = new THREE.Object3D;
                      object.position.x = 900 * Math.sin(phi);
                      object.position.y = -(i * 8) + 450;
                      object.position.z = 900 * Math.cos(phi);
                      vector.x = object.position.x * 2;
                      vector.y = object.position.y;
                      vector.z = object.position.z * 2;
                      object.lookAt(vector);
                      targets.helix.push(object);
                      i++;
                    }
                    i = 0;
                    while (i < objects.length) {
                      object = new THREE.Object3D;
                      object.position.x = i % 5 * 400 - 800;
                      object.position.y = -(Math.floor(i / 5) % 5) * 400 + 800;
                      object.position.z = Math.floor(i / 25) * 1000 - 2000;
                      targets.grid.push(object);
                      i++;
                    }
                    window.renderer = renderer = new THREE.CSS3DRenderer;
                    renderer.setSize(window.innerWidth * 0.7, window.innerHeight);
                    renderer.domElement.style.position = 'absolute';
                    document.getElementById('container').appendChild(renderer.domElement);
                    window.controls = controls = new THREE.TrackballControls(camera, renderer.domElement);
                    controls.rotateSpeed = 0.5;
                    controls.addEventListener('change', render);
                    button = document.getElementById('table');
                    button.addEventListener('click', function(event){
                      return transform(targets.table, 2000);
                    }, false);
                    button = document.getElementById('sphere');
                    button.addEventListener('click', function(event){
                      return transform(targets.sphere, 2000);
                    }, false);
                    button = document.getElementById('helix');
                    button.addEventListener('click', function(event){
                      return transform(targets.helix, 2000);
                    }, false);
                    button = document.getElementById('grid');
                    button.addEventListener('click', function(event){
                      return transform(targets.grid, 2000);
                    }, false);
                    transform(targets.sphere, 5000);
                    return window.addEventListener('resize', onWindowResize, false);
                  };
                  transform = function(targets, duration){
                    var i, object, target, ref$;
                    TWEEN.removeAll();
                    i = 0;
                    while (i < objects.length) {
                      object = objects[i];
                      target = targets[i];
                      new TWEEN.Tween(object.position).to({
                        x: (ref$ = target.position).x,
                        y: ref$.y,
                        z: ref$.z
                      }, Math.random() * duration + duration).easing(TWEEN.Easing.Exponential.InOut).start();
                      new TWEEN.Tween(object.rotation).to({
                        x: (ref$ = target.rotation).x,
                        y: ref$.y,
                        z: ref$.z
                      }, Math.random() * duration + duration).easing(TWEEN.Easing.Exponential.InOut).start();
                      i++;
                    }
                    return new TWEEN.Tween(this).to({}, duration * 2).onUpdate(render).start();
                  };
                  onWindowResize = function(){
                    camera.aspect = window.innerWidth / window.innerHeight;
                    camera.updateProjectionMatrix();
                    renderer.setSize(window.innerWidth, window.innerHeight);
                    return render();
                  };
                  animate = function(){
                    requestAnimationFrame(animate);
                    TWEEN.update();
                    return controls.update();
                  };
                  render = function(){
                    return renderer.render(scene, camera);
                  };
                  objects = [];
                  targets = {
                    table: [],
                    sphere: [],
                    helix: [],
                    grid: []
                  };
                  init();
                  return animate();
                });
              });
            });
          });
        });
      });
    });
  });
}).call(this);
