// Generated by LiveScript 1.2.0
(function(){
  var replace$ = ''.replace;
  $(function(){
    var CACHED, GET, $in, $out;
    CACHED = {};
    GET = function(url, data, onSuccess, dataType){
      var ref$;
      if (data instanceof Function) {
        ref$ = [null, onSuccess, data], data = ref$[0], dataType = ref$[1], onSuccess = ref$[2];
      }
      if (CACHED[url]) {
        return onSuccess(CACHED[url]);
      }
      return $.get(url, data, function(it){
        return onSuccess(CACHED[url] = it);
      }, dataType || 'json').fail(function(){});
    };
    $in = $('#input');
    $out = $('#output');
    return GET("Shape.json", function(Shape){
      return GET("Sound.json", function(Sound){
        return GET("Radical.json", function(Radical){
          return GET("RadicalSame.json", function(RadicalSame){
            return GET("SoundRhyme.json", function(SoundRhyme){
              return GET("SoundAlike.json", function(SoundAlike){
                var origin;
                origin = "http://127.0.0.1:8888/";
                window.id = 'tmuse';
                window.reset = function(){
                  return $in.val('');
                };
                window.addEventListener("message", function(it){
                  return window.input(it.data, false);
                });
                window.input = function(it){
                  var sims, i$, len$, char;
                  $in.val(it);
                  $out.empty();
                  sims = "";
                  for (i$ = 0, len$ = it.length; i$ < len$; ++i$) {
                    char = it[i$];
                    if (!Shape[char]) {
                      continue;
                    }
                    sims += char + Shape[char];
                  }
                  return showChars(sims);
                };
                window.output = function(it){
                  if (window.muted) {
                    return;
                  }
                  input(it);
                  return window.top.postMessage(it, origin);
                };
                function draw(ch){
                  var parts, i$, ref$, len$, s, $li, p;
                  parts = [];
                  parts.push($('<a/>', {
                    href: '#'
                  }).text(ch).click(function(){
                    return window.output($(this).text());
                  }));
                  for (i$ = 0, len$ = (ref$ = Sound[ch] || []).length; i$ < len$; ++i$) {
                    s = ref$[i$];
                    parts.push($('<a/>', {
                      href: '#'
                    }).text(s).click(fn$));
                  }
                  parts.push($('<a/>', {
                    href: '#'
                  }).text(Radical[ch]).click(function(){
                    return goRadical($(this).text());
                  }));
                  $li = $('<li/>');
                  for (i$ = 0, len$ = parts.length; i$ < len$; ++i$) {
                    p = parts[i$];
                    $li.append(p);
                    $li.append('&nbsp;');
                  }
                  return $li.appendTo($out);
                  function fn$(){
                    return goAlike($(this).text());
                  }
                }
                window.debug = (function(){
                  function showChars(it){
                    var table, i$, len$, ch, radical, bpmf;
                    window.table = table = [];
                    for (i$ = 0, len$ = it.length; i$ < len$; ++i$) {
                      ch = it[i$];
                      if (!Sound[ch]) {
                        continue;
                      }
                      radical = Radical[ch];
                      bpmf = Sound[ch][0];
                      table.push({
                        ch: ch,
                        bpmf: bpmf,
                        radical: radical
                      });
                    }
                    window.init(table);
                    return window.animate();
                  }
                  return showChars;
                }());
                function goRadical(it){
                  return showChars(RadicalSame[it]);
                }
                function goRhyme(it){
                  var ref$;
                  return showChars(SoundRhyme[(ref$ = replace$.call(it, /[ˋˊˇ‧]/g, ''))[ref$.length - 1]]);
                }
                function goAlike(it){
                  return showChars(SoundAlike[replace$.call(it, /[ˋˊˇ‧]/g, '')]);
                }
                return GET("Table.json", function(table){
                  window.table = table;
                  window.init(table);
                  return window.animate();
                });
              });
            });
          });
        });
      });
    });
  });
}).call(this);
